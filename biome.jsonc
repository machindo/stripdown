{
  "$schema": "https://biomejs.dev/schemas/2.0.0-beta.6/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": true
  },
  "files": {
    "includes": [
      "*",
      "**",
      "!**/{cache,dist,publish,node_modules,styled-system}/**/*",
      "!**/*.astro",
      "!packages/joplin-plugin/api/**/*"
    ]
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space",
    "indentWidth": 2
  },
  "assist": {
    "actions": {
      "source": {
        "organizeImports": {
          "level": "on",
          "options": {
            "groups": [
              ":NODE:",
              ":BUN:",
              ":BLANK_LINE:",
              ":PACKAGE:",
              ":BLANK_LINE:",
              ":ALIAS:",
              ":PATH:"
            ]
          }
        },
        "useSortedAttributes": "on",
        "useSortedProperties": "on"
      }
    }
  },
  "linter": {
    "enabled": true,
    "rules": {
      "style": {
        "noInferrableTypes": "error",
        "noNonNullAssertion": "error",
        "noParameterAssign": "error",
        "noUnusedTemplateLiteral": "error",
        "noUselessElse": "error",
        "useAsConstAssertion": "error",
        "useConsistentArrayType": "error",
        "useConst": "error",
        "useDefaultParameterLast": "error",
        "useEnumInitializers": "error",
        "useExponentiationOperator": "error",
        "useExportType": "error",
        "useImportType": "error",
        "useLiteralEnumMembers": "error",
        "useNodejsImportProtocol": "error",
        "useNumberNamespace": "error",
        "useSelfClosingElements": "error",
        "useShorthandFunctionType": "error",
        "useSingleVarDeclarator": "error",
        "useTemplate": "error"
      },
      "correctness": {
        "noUnusedVariables": "error"
      },
      "complexity": {
        "noArguments": "error",
        "noCommaOperator": "error",
        "useArrowFunction": "warn",
        "useNumericLiterals": "error"
      },
      "nursery": {
        "noFloatingPromises": "error",
        "useConsistentObjectDefinition": {
          "level": "error",
          "options": {
            "syntax": "shorthand"
          }
        }
      }
    }
  },
  "css": {
    "parser": {
      "cssModules": true
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "single",
      "semicolons": "asNeeded"
    }
  }
}
